// main.go
package main

import (
	"fmt"
	"os"
	"time"

	"github.com/mymmrac/telego"
	th "github.com/mymmrac/telego/telegohandler"
	tu "github.com/mymmrac/telego/telegoutil"
)

var (
	episodeTracker   = make(map[int]int)
	chatIDs          = []int64{}
	lastRequestTimes = make(map[int64]time.Time)
	requestInterval  = 12 * time.Hour // –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —Å–≤–µ–∂–µ–π –ø–æ–¥–±–æ—Ä–∫–∏
)

func main() {
	botToken := "5160413773:AAGyjpQbrAL-1hR6bnV8GwDY3ioIjxBVRzk"

    err := loadEpisodeTracker()
    if err != nil {
        fmt.Println("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å episode tracker: ", err)
    }

    defer saveEpisodeTracker()

	bot, err := telego.NewBot(botToken, telego.WithDefaultDebugLogger())
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}

	updates, _ := bot.UpdatesViaLongPolling(nil)
	bh, _ := th.NewBotHandler(bot, updates)

	defer bh.Stop()
	defer bot.StopLongPolling()

	bh.Handle(startHandler, th.CommandEqual("start"))
	bh.Handle(freshAnimeHandler, th.TextEqual("–°–≤–µ–∂–∞—è –ø–æ–¥–±–æ—Ä–∫–∞"))

	go func() {
		for {
			checkForNewEpisodes(bot)
			time.Sleep(1 * time.Hour)
		}
	}()

	bh.Start()
}

func startHandler(bot *telego.Bot, update telego.Update) {
	chatID := tu.ID(update.Message.Chat.ID)
	chatIDs = append(chatIDs, update.Message.Chat.ID)

	keyboard := tu.Keyboard(
		tu.KeyboardRow(
			tu.KeyboardButton("–°–≤–µ–∂–∞—è –ø–æ–¥–±–æ—Ä–∫–∞"),
		),
	).WithResizeKeyboard()

	message := tu.Message(
		chatID,
		"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ–±—â–∞–µ—Ç –æ –Ω–æ–≤–∏–Ω–∫–∞—Ö –∞–Ω–∏–º–µ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã—Ö–æ–¥–µ –Ω–æ–≤—ã—Ö —Å–µ—Ä–∏–π üì∫ ‚ú®\n–î–∞–π—Ç–µ –∑–Ω–∞—Ç—å, —á—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è, –∏ —è –±—É–¥—É –¥–µ—Ä–∂–∞—Ç—å –≤–∞—Å –≤ –∫—É—Ä—Å–µ!",
	).WithReplyMarkup(keyboard)

	_, _ = bot.SendSticker(
		tu.Sticker(
			chatID,
			tu.FileFromID("CAACAgIAAxkBAAEMkJdmqNnOUgkktshH0TJRYDmAGcb1wwACPwAD0DQ6Jwe4M9oNkfpONQQ"),
		),
	)

	_, _ = bot.SendMessage(message)
}

func checkForNewEpisodes(bot *telego.Bot) {
    fmt.Println("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —ç–ø–∏–∑–æ–¥–æ–≤...")
    animes, err := getAnimesFromShikimori()
    if err != nil {
        fmt.Println("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∏–º–µ:", err)
        return
    }

    sortAnimesByScore(animes)
    fmt.Println("–ê–Ω–∏–º–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")

    for _, anime := range animes {
        previousEpisodes, exists := episodeTracker[anime.Id]
        fmt.Printf("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∏–º–µ —Å ID %d: –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —ç–ø–∏–∑–æ–¥—ã = %d, —Ç–µ–∫—É—â–∏–µ —ç–ø–∏–∑–æ–¥—ã = %d\n", anime.Id, previousEpisodes, anime.Episode)

        if !exists || anime.Episode > previousEpisodes {
            episodeTracker[anime.Id] = anime.Episode
            fmt.Printf("–û–±–Ω–æ–≤–ª–µ–Ω–æ: –ê–Ω–∏–º–µ —Å ID %d —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç %d —ç–ø–∏–∑–æ–¥–æ–≤.\n", anime.Id, anime.Episode)

            for _, chatID := range chatIDs {
                photoMessage := tu.Photo(
                    tu.ID(chatID),
                    tu.FileFromURL("https://shikimori.one"+anime.Image.Original),
                ).WithCaption(formatAnime(anime))

                _, err := bot.SendPhoto(photoMessage)
                if err != nil {
                    fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ:", err)
                } else {
                    fmt.Printf("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç %d –¥–ª—è –∞–Ω–∏–º–µ —Å ID %d\n", chatID, anime.Id)
                }
            }
        }
    }

    err = saveEpisodeTracker()
    if err != nil {
        fmt.Println("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å episode tracker:", err)
    } else {
        fmt.Println("episodeTracker —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    }
}

func simulateAnimeUpdate(bot *telego.Bot) {
    fmt.Println("–ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–µ...")
    time.Sleep(30 * time.Second) // –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º

    animeID := 49785
    newEpisodeCount := 8

    previousCount, exists := episodeTracker[animeID]
    if !exists {
        previousCount = 0
    }

    episodeTracker[animeID] = newEpisodeCount
    fmt.Printf("–ê–Ω–∏–º–µ —Å ID %d –æ–±–Ω–æ–≤–ª–µ–Ω–æ: —Ç–µ–ø–µ—Ä—å %d —ç–ø–∏–∑–æ–¥–æ–≤.\n", animeID, newEpisodeCount)

    if newEpisodeCount > previousCount {
        for _, chatID := range chatIDs {
            photoMessage := tu.Photo(
                tu.ID(chatID),
                tu.FileFromURL("https://shikimori.one/system/animes/original/49785.jpg"),
            ).WithCaption(fmt.Sprintf("–ê–Ω–∏–º–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä—å %d —Å–µ—Ä–∏–π.", newEpisodeCount))

            _, err := bot.SendPhoto(photoMessage)
            if err != nil {
                fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", err)
            } else {
                fmt.Printf("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç %d –¥–ª—è –∞–Ω–∏–º–µ —Å ID %d\n", chatID, animeID)
            }
        }
    }

    err := saveEpisodeTracker()
    if err != nil {
        fmt.Println("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å episode tracker:", err)
    } else {
        fmt.Println("episodeTracker —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ—Å–ª–µ —Å–∏–º—É–ª—è—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    }
}




// func freshAnimeHandler(bot *telego.Bot, update telego.Update) {
//     chatID := update.Message.Chat.ID
//     currentTime := time.Now()

//     if lastRequestTime, exists := lastRequestTimes[chatID]; exists {
//         if currentTime.Sub(lastRequestTime) < requestInterval {
//             message := tu.Message(
//                 tu.ID(chatID),
//                 "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–≤–µ–∂—É—é –ø–æ–¥–±–æ—Ä–∫—É —Ä–∞–∑ –≤ 12 —á–∞—Å–æ–≤ ‚è∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ ‚åõÔ∏è",
//             )
//             _, _ = bot.SendMessage(message)
//             return
//         }
//     }

//     lastRequestTimes[chatID] = currentTime

//     handleAnimes(bot, []int64{chatID})
// }

// func checkForNewEpisodes(bot *telego.Bot) {
//     handleAnimes(bot, chatIDs)
// }